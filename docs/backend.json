{
  "entities": {
    "Precedent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Precedent",
      "type": "object",
      "description": "Represents an architectural precedent stored in the CODEA library.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the precedent."
        },
        "title": {
          "type": "string",
          "description": "The title of the architectural precedent."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the architectural precedent."
        },
        "architect": {
          "type": "string",
          "description": "The architect or firm responsible for the precedent."
        },
        "location": {
          "type": "string",
          "description": "The location of the architectural precedent."
        },
        "year": {
          "type": "number",
          "description": "The year the architectural precedent was completed."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of an image representing the precedent.",
          "format": "uri"
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the architectural precedent.",
          "items": {
            "type": "string"
          }
        },
        "codeaCategories": {
          "type": "array",
          "description": "CODEA-specific categories assigned to the precedent to describe architechtural code.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "architect",
        "location",
        "year",
        "imageUrl",
        "tags",
        "codeaCategories"
      ]
    },
    "VisionInsight": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VisionInsight",
      "type": "object",
      "description": "Represents an insight generated by the vision section of the CODEA Landing application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the vision insight."
        },
        "text": {
          "type": "string",
          "description": "The generated insight text."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time the insight was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "text",
        "timestamp"
      ]
    },
    "UserInteraction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInteraction",
      "type": "object",
      "description": "Represents a user interaction within the CODEA Landing application (e.g., search query, button click).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user interaction event."
        },
        "userId": {
          "type": "string",
          "description": "Identifier of the user who performed the interaction. Can be null for anonymous users."
        },
        "eventType": {
          "type": "string",
          "description": "The type of user interaction event (e.g., 'search', 'click', 'view')."
        },
        "eventDetails": {
          "type": "string",
          "description": "Details about the event (e.g., search query, button ID clicked). This allows for flexiblity of the type."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time the interaction occurred.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "eventType",
        "eventDetails",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/precedents/{precedentId}",
        "definition": {
          "entityName": "Precedent",
          "schema": {
            "$ref": "#/backend/entities/Precedent"
          },
          "description": "Stores architectural precedents that are publicly accessible.",
          "params": [
            {
              "name": "precedentId",
              "description": "The unique identifier for the precedent."
            }
          ]
        }
      },
      {
        "path": "/vision_insights/{visionInsightId}",
        "definition": {
          "entityName": "VisionInsight",
          "schema": {
            "$ref": "#/backend/entities/VisionInsight"
          },
          "description": "Stores insights generated by the vision section of the CODEA Landing application.",
          "params": [
            {
              "name": "visionInsightId",
              "description": "The unique identifier for the vision insight."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/interactions/{interactionId}",
        "definition": {
          "entityName": "UserInteraction",
          "schema": {
            "$ref": "#/backend/entities/UserInteraction"
          },
          "description": "Stores user interaction events, accessible only to the respective user.  Path-based ownership enforces that only the user with the matching userId can access their interaction data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "interactionId",
              "description": "The unique identifier for the user interaction."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to support the CODEA Landing application's features, emphasizing security, scalability, and debuggability, adhering to the core design principles and strategy mandates.\n\n**Authorization Independence:**\n\n*   This design avoids hierarchical authorization dependencies (`get()`).  Authorization is based on `request.auth.uid` and, where necessary, denormalized data.\n\n**Structural Segregation (Homogeneous Security Posture):**\n\n*   Data with different access needs is stored in separate collections.  For example, user-specific data is stored under `/users/{userId}`.\n\n**Access Modeling:**\n\n*   **Private Data:** Uses path-based ownership for user-specific data (e.g., `/users/{userId}/interactions/{interactionId}`).\n\n**QAPs Support:**\n\n*   The structure facilitates secure `list` operations.  Since documents within a collection share the same security requirements, rules can be written to allow listing based on user roles or ownership without complex filtering.\n\n**Invariants:**\n\n*   Timestamps are included in entities like `VisionInsight` and `UserInteraction` to help maintain data integrity and enable chronological ordering.\n\n**Specific Entity Considerations:**\n\n*   **Precedents:** Stored in a top-level `precedents` collection for global access, assuming all precedents are public.\n*   **VisionInsights:** Stored in a top-level `vision_insights` collection, accessible to all users.\n*   **UserInteractions:** Stored under each user's document in the `users` collection, allowing each user to access their own interaction data."
  }
}