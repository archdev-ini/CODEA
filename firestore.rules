/**
 * @fileoverview Firestore Security Rules for the CODEA Landing application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data and allows public read access to shared data.
 *
 * Data Structure:
 * - /precedents/{precedentId}: Publicly accessible architectural precedents.
 * - /vision_insights/{visionInsightId}: Publicly accessible vision insights.
 * - /users/{userId}/interactions/{interactionId}: User-specific interaction data, accessible only to the owner.
 *
 * Key Security Decisions:
 * - Listing of precedents and vision insights is allowed for all users.
 * - User interaction data is strictly private, with access limited to the owning user.
 * - Data validation is limited to authorization-critical fields to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read architectural precedents, but only allows authenticated users to create, update, or delete them.
     * @path /precedents/{precedentId}
     * @allow (get, list): Any user can read precedents.
     * @allow (create): Any authenticated user can create a precedent. The 'ownerId' field must match the user's UID.
     * @allow (update, delete): Only the precedent owner can update or delete it.
     * @deny (create): An unauthenticated user cannot create a precedent.
     * @deny (update, delete): A non-owner cannot update or delete a precedent.
     * @principle Allows public read access to precedents while restricting write access to owners.
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read vision insights. Creation, update, and deletion are disallowed.
     * @path /vision_insights/{visionInsightId}
     * @allow (get, list): Any user can read vision insights.
     * @deny (create, update, delete): No one can create, update, or delete vision insights via the client.
     * @principle Provides public read access to vision insights with no write access.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user interaction data, ensuring only the owning user can access their data.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow (create): Allows a user to create their own interaction data, validating that the userId matches.
     * @allow (get, list): Allows a user to read their own interaction data.
     * @allow (update, delete): Allows a user to update or delete their own interaction data.
     * @deny (create): Denies creation if the userId in the data does not match the authenticated user's ID.
     * @deny (update, delete): Denies updates or deletes if the user is not the owner or if the document does not exist.
     * @principle Enforces strict ownership: users can only access their own interaction data.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the requesting user is the owner of the document based on the userId.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the requesting user is the owner of the document and the document exists.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @return {boolean} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}