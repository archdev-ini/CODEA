/**
 * @file Firestore Security Rules for CODEA Landing Application
 *
 * @core_philosophy This ruleset implements a hybrid security model: public read access for precedents and vision insights,
 *                  and strict user-ownership for user interaction data.
 *
 * @data_structure
 *   - /precedents/{precedentId}: Publicly accessible architectural precedents.
 *   - /vision_insights/{visionInsightId}: Publicly accessible vision insights.
 *   - /users/{userId}/interactions/{interactionId}: User-specific interaction data.
 *
 * @key_security_decisions
 *   - Public read access is granted to the /precedents and /vision_insights collections.
 *   - User interaction data is strictly controlled by path-based ownership; users can only access their own data.
 *   - The rules explicitly deny any unauthorized access, ensuring data privacy and integrity.
 *   - Listing of user interactions is only allowed for the owning user.
 *
 * @denormalization_for_authorization
 *   - Path-based ownership in /users/{userId}/interactions/{interactionId} eliminates the need for `get()` calls to determine ownership. The `userId` path segment directly implies ownership.
 *
 * @structural_segregation
 *   - Public data (precedents, vision insights) is stored in top-level collections, while private, user-specific data (user interactions) is stored under the /users/{userId} path, providing a clear separation of concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to precedents, with no write access.
     * @path /precedents/{precedentId}
     * @allow get, list: Anyone can read precedents.
     * @deny create, update, delete: No one can modify or delete precedents.
     * @principle Allows public access for read-only content
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to vision insights, with no write access.
     * @path /vision_insights/{visionInsightId}
     * @allow get, list: Anyone can read vision insights.
     * @deny create, update, delete: No one can modify or delete vision insights.
     * @principle Allows public access for read-only content.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for interaction data.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow get, list: Only the owner (matching userId) can read their interactions.
     * @allow create: Only the owner can create new interaction documents with a matching user ID.
     * @allow update, delete: Only the owner can modify or delete their existing interactions.
     * @deny get, list: if userId != request.auth.uid;
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource, based on the provided user ID.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}