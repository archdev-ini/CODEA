/**
 * @file Firestore Security Rules for CODEA Landing Application
 *
 * @core_philosophy This ruleset enforces a combination of public read access for globally available data (precedents, vision insights) and strict user-ownership for private data (user interactions).
 *
 * @data_structure
 *   - /precedents/{precedentId}: Publicly accessible architectural precedents.
 *   - /vision_insights/{visionInsightId}: Publicly accessible vision insights.
 *   - /users/{userId}/interactions/{interactionId}: User-specific interaction data, accessible only to the owning user.
 *
 * @key_security_decisions
 *   - Public Read Access: The precedents and vision_insights collections are readable by all users (including unauthenticated users).
 *   - User Interaction Ownership: User interactions are strictly owned by the user whose ID is in the path.
 *   - No User Listing: Listing of all users is disallowed.
 *
 * @denormalization_for_authorization N/A - Authorization decisions are based directly on `request.auth.uid` and the document paths.
 * @structural_segregation Public data (precedents, vision insights) is stored in top-level collections, while private user data (user interactions) is stored in user-specific subcollections. This simplifies access control and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to precedents and owner-only write access.
     * @path /precedents/{precedentId}
     * @allow (get, list): Any user can read precedents.
     * @allow (create): Any authenticated user can create a precedent. The 'id' field must be equal to `precedentId`.
     * @allow (update, delete): Only the user who created the precedent can modify or delete it.
     * @deny (create): An unauthenticated user cannot create a precedent.
     * @deny (update, delete): A user cannot modify or delete a precedent they don't own.
     * @principle Public read, owner-only write access control.
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Need to implement create() rule before update() and delete() can be allowed.
    }

    /**
     * @description Allows public read access to vision insights.
     * @path /vision_insights/{visionInsightId}
     * @allow (get, list): Any user can read vision insights.
     * @deny (create, update, delete): No one can create, update, or delete vision insights through the client.
     * @principle Public read access control.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict user-ownership for user interaction data.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow (create): Only the user with the matching userId can create interaction data under their path. The 'userId' field in the document must match the userId in the path.
     * @allow (get, list, update, delete): Only the user with the matching userId can access their interaction data.
     * @deny (create): A user cannot create interaction data under another user's path. The 'userId' field in the document must match the userId in the path.
     * @deny (get, list, update, delete): A user cannot access another user's interaction data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}