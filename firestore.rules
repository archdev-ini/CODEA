/**
 * @file Firestore Security Rules for CODEA Landing Application
 * @version Prototyping Mode - Authorization Focused
 *
 * @description This ruleset enforces a strict data access model based on
 * path-based ownership and public read access where appropriate. Data validation
 * is minimized to allow for rapid prototyping and schema iteration.
 *
 * @dataStructure
 * - `/precedents/{precedentId}`: Publicly accessible architectural precedents.
 * - `/vision_insights/{visionInsightId}`: Publicly accessible vision insights.
 * - `/users/{userId}/interactions/{interactionId}`: User-specific interaction data, accessible only to the owning user.
 *
 * @keySecurityDecisions
 * - Public read access for precedents and vision insights.
 * - User-owned interactions with path-based ownership enforcement.
 * - No user listing is allowed.
 *
 * @denormalization None necessary for the current ruleset, as ownership is derived from document paths.
 * @structuralSegregation User-specific data is stored under the `/users/{userId}` path, ensuring private access. Public data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to precedents and restricts write access.
     * @path /precedents/{precedentId}
     * @allow (get, list)
     * @allow (create, update, delete) User must be authenticated.
     * @deny (create, update, delete) if user is not authenticated.
     * @principle Public read access with owner-only writes.
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to vision insights and restricts write access.
     * @path /vision_insights/{visionInsightId}
     * @allow (get, list)
     * @allow (create, update, delete) User must be authenticated.
     * @deny (create, update, delete) if user is not authenticated.
     * @principle Public read access with owner-only writes.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces path-based ownership for user interaction data.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow (create) User must be authenticated and userId must match request.auth.uid.
     * @allow (get, list, update, delete) User must be authenticated and userId must match request.auth.uid.
     * @deny (create) if user is not authenticated or userId does not match request.auth.uid.
     * @deny (get, list, update, delete) if user is not authenticated or userId does not match request.auth.uid.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}