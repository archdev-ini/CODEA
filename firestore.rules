/**
 * @fileoverview Firestore Security Rules for the CODEA Landing application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture with flexible data shapes to accelerate prototyping.
 * It enforces strict user-ownership for private data and allows public read access where appropriate.
 *
 * Data Structure:
 * - /precedents/{precedentId}: Publicly accessible architectural precedents.
 * - /vision_insights/{visionInsightId}: Publicly accessible vision insights.
 * - /users/{userId}/interactions/{interactionId}: User-specific interaction data, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Public read access to precedents and vision insights to facilitate open discovery.
 * - Strict user ownership for user interactions, ensuring privacy and data isolation.
 * - List operations are allowed for owners of user interactions but denied otherwise, to ensure users can see their own interactions but not others'.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to architectural precedents and owner-only write access.
     * @path /precedents/{precedentId}
     * @allow (get, list): Any user can read precedents.
     * @allow (create): Only the authenticated user can create, ensuring they are the owner. The 'authorId' field in the created document must match their `request.auth.uid`.
     * @allow (update, delete): Only the authenticated user that owns the precedent can update or delete it.
     * @deny (create): If `request.resource.data.authorId` does not match `request.auth.uid`.
     * @deny (update, delete): If the authenticated user is not the owner (i.e., `request.auth.uid` != `resource.data.authorId`).
     * @principle Allows public reads while enforcing ownership for writes.
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to vision insights.
     * @path /vision_insights/{visionInsightId}
     * @allow (get, list): Any user can read vision insights.
     * @deny (create, update, delete): No user can create, update, or delete vision insights through the client.
     * @principle Provides open access to insights generated by the application.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user interaction events with path-based ownership.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow (create): The user can create an interaction event under their own user ID if the `userId` matches their authentication UID.
     * @allow (get, list): The user can read their own interaction events.
     * @allow (update, delete): The user can update or delete their own interaction events if they exist.
     * @deny (create): If the `userId` does not match the `request.auth.uid`.
     * @deny (get, list, update, delete): If the `userId` does not match the `request.auth.uid`.
     * @principle Enforces strict user ownership for interaction events.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}