/**
 * @fileOverview Firestore Security Rules for the CODEA Landing application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data while allowing public read access to shared data.
 *
 * Data Structure:
 * - `/precedents/{precedentId}`: Publicly accessible architectural precedents.
 * - `/vision_insights/{visionInsightId}`: Publicly accessible vision insights.
 * - `/users/{userId}/interactions/{interactionId}`: User-specific interaction data, accessible only by the owner.
 *
 * Key Security Decisions:
 * - Public read access to precedents and vision insights is granted.
 * - User listing is implicitly denied (no top-level `/users` collection with `list` enabled).
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - Data validation is minimal to facilitate rapid prototyping, focusing on ownership checks and relational integrity.
 *
 * Denormalization for Authorization:
 * - None explicitly required in this version, as path-based ownership is sufficient for user interactions and public data doesn't require ownership checks.
 *
 * Structural Segregation:
 * - Private user interaction data is stored in a dedicated subcollection (`/users/{userId}/interactions/{interactionId}`) to isolate it from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to architectural precedents and restricts writes.
     * @path /precedents/{precedentId}
     * @allow (get, list): Any user can read the precedent.
     * @deny (create, update, delete): No user can create, update, or delete a precedent.
     * @principle Allows public read access for global data while restricting modification.
     */
    match /precedents/{precedentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to vision insights and restricts writes.
     * @path /vision_insights/{visionInsightId}
     * @allow (get, list): Any user can read the vision insight.
     * @deny (create, update, delete): No user can create, update, or delete a vision insight.
     * @principle Allows public read access for global data while restricting modification.
     */
    match /vision_insights/{visionInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user interaction data, allowing each user to access only their own data.
     * @path /users/{userId}/interactions/{interactionId}
     * @allow (create): A user can create an interaction if the userId matches their auth UID.
     * @allow (get, list, update, delete): A user can get, list, update, or delete an interaction if the userId matches their auth UID.
     * @deny (create): A user cannot create an interaction if the userId does not match their auth UID.
     * @deny (get, list, update, delete): A user cannot get, list, update, or delete an interaction if the userId does not match their auth UID.
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/interactions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}